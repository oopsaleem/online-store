application {
  config {
    databaseType sql
    devDatabaseType h2Disk
    enableHibernateCache true
    enableSwaggerCodegen false
    enableTranslation true
    jhiPrefix jhi
    languages [en, ar-ly]
    messageBroker false
    nativeLanguage en
    packageName com.mycompany.store
    packageFolder com/mycompany/store
    prodDatabaseType mysql
    searchEngine false
    serviceDiscoveryType false
    skipClient false
    skipServer false
    testFrameworks []
    websocket spring-websocket
    jhipsterVersion 6.6.0
    applicationType monolith
    baseName store
    serverPort 8080
    authenticationType jwt
    cacheProvider ehcache
    buildTool maven
    jwtSecretKey Njg0NWY3NjgxZDBhMjc5YjljM2Y1MzZkNGY0NWIzN2Y0OTMwNjUxMTg5Njc1YTg3MWQwNWRhMzhjNzI4MTU5NGY5NWU1YTViM2VkOWVlMTlhNWFiZDJiODY3M2FiYWZkMjk0MTg0Mjg3OWJmMjdkMzI4OTBhMzBlNDg5NzVmMzU=
    embeddableLaunchScript false
    useSass true
    clientPackageManager npm
    clientFramework angularX
    clientTheme slate
    clientThemeVariant primary
    creationTimestamp 1580629539918
    entitySuffix 
    dtoSuffix DTO
    otherModules []
    blueprints 
    skipUserManagement false
  }

  entities Customer, Invoice, OrderItem, Product, ProductCategory, ProductOrder, Shipment
}

entity Customer {
  firstName String required,
  lastName String required,
  gender Gender required,
  email String required pattern(/^[^@\s]+@[^@\s]+\.[^@\s]+$/),
  phone String required,
  addressLine1 String required,
  addressLine2 String,
  city String required,
  country String required
}
entity Invoice {
  date Instant required,
  details String,
  status InvoiceStatus required,
  paymentMethod PaymentMethod required,
  paymentDate Instant required,
  paymentAmount BigDecimal required,
  code String required
}
entity OrderItem {
  quantity Integer required min(0),
  totalPrice BigDecimal required min(0),
  status OrderItemStatus required
}
/**
 * Product sold by the Online store
 */
entity Product {
  name String required,
  description String,
  price BigDecimal required min(0),
  size Size required,
  image ImageBlob
}
entity ProductCategory {
  name String required,
  description String
}
entity ProductOrder {
  placedDate Instant required,
  status OrderStatus required,
  code String required
}
entity Shipment {
  trackingCode String,
  date Instant required,
  details String
}
enum Gender {
  MALE,
  FEMALE,
  OTHER
}
enum InvoiceStatus {
  PAID,
  ISSUED,
  CANCELLED
}
enum PaymentMethod {
  CREDIT_CARD,
  CASH_ON_DELIVERY,
  PAYPAL
}
enum OrderItemStatus {
  AVAILABLE,
  OUT_OF_STOCK,
  BACK_ORDER
}
enum Size {
  S,
  M,
  L,
  XL,
  XXL
}
enum OrderStatus {
  COMPLETED,
  PENDING,
  CANCELLED
}

relationship OneToOne {
  Customer{user(login) required} to User
}
relationship OneToMany {
  ProductOrder{invoice} to Invoice{order(code) required},
  ProductOrder{orderItem} to OrderItem{order(code) required},
  ProductCategory{product} to Product{productCategory(name)},
  Customer{order} to ProductOrder{customer(email) required},
  Invoice{shipment} to Shipment{invoice(code) required}
}
relationship ManyToOne {
  OrderItem{product(name) required} to Product
}

paginate Customer, Invoice, OrderItem, Product, ProductOrder, Shipment with pagination
service Customer, Invoice, OrderItem, Product, ProductCategory, ProductOrder, Shipment with serviceClass
